---
layout: single
title:  "架构"
date:   2018-12-02 16:00:00 +0800
categories: idea
tags: architecture code effeciency 
excerpt: 关于架构的一些看法
header:
  overlay_image: /assets/images/machine.png
  caption: "Photo by yqman"
  cta_label: "More Info"
  cta_url: "http://yqman.top"
toc: true
toc_label: "Contents"
toc_icon: "align-left" 
---
最近阅读了《Beautiful Architecture》，书中关于架构的一些看法自己感触颇深，本文会依据自己的工作实践和书中的一些概念对架构进行简单的描述，希望能对大家有所启发。

## 架构是什么
在技术领域谈到架构一词总是显得特别高大上，成为一个架构师甚至成了很多人的奋斗目标。架构一词在建筑领域也经常出现，设计师设计图纸，工人依据图纸进行实际的建设工作，最终建造出与架构预期的复杂建筑。

上一篇博文《代码》提到过，通过隐喻可以让我们更好的理解软件项目。在软件中架构是对预期目标和实际情况的折中设计。通过架构的设计分离各个模块，各模块功能和各模块间的交互都有清晰的定义，方便相关人员理解和实施，最终创建出个人可以理解的更大的系统。

## 架构的作用 
任何架构不可能凭空出现，肯定是为了解决一定的问题。没有架构的系统会变得难以维护和迭代开发，导致各种易错的重复的代码出现，降低开发人员的开发效率。在《Beautiful Architecture》一书的第二章给出了一个好架构和一个坏架构的例子，通过两者对比，让我们更加直观的感受到架构对于一个系统、团队和部门潜移默化的影响。下面简单摘录其中的几个点。

### 混乱大都市
系统的创建之初基本上是一些偶然聚集的代码逐渐堆积而成，没有清晰的概念和模块划分，置身其中，迷失方向。最终导致
* 模块缺乏内聚：单个模块包含了一大堆杂乱的不一定相关的功能，没有清晰的模块定义和边界划分，个人开始创建自己的软件小帝国，把自己认为酷的功能放在自己的模块中
* 不必要的耦合：没有清晰的分层，导致模块间的双向耦合；单个组件的任何影响都会波及其他组件，孤立的看待代码组件没有任何意义
* 不可理解：新成员会被复杂性惊呆，不能够搞清楚状况，坏的设计不断叠加在上面，系统来越越乱恶性循环；没有通用的设计，没有整体项目风格，导致大量的重复造轮子
* 代码以外的问题：影响人、团队、过程和时间表
* 无法忍受的结果：要么花费大量的精力人力物力去重新设计这个架构，要么等待被管理层抛弃

### 设计之城
系统的创建之初由有经验的架构师进行深思熟虑的设计，在构建时体现出了优雅和平衡，有很好的地图便于导航。最终导致
* 快速定位、修改、修复功能：新的功能单元被一致的添加到代码集的正确功能区域，代码属于哪一块从来就不是一个问题
* 延迟设计决定：最初只设计重要的部分，所有剩下的决定推迟，直到我们对实际需求有了更清晰的理解并知道如何放到系统中最好时，再做出这些决定，很大程度上解放了思想


## 什么是好的架构
任何架构不可能所有方面都是完美的，必然会有取舍，有自己的优势和劣势；因此不存在一个尽善尽美的放之四海而皆准的好架构，一个没有取舍的架构必然是个糟糕的架构。

好的架构有很多的评判标准，包括《Beautiful Architecture》一书中介绍的架构原则与特性和架构结构，整本书在每一章前面也都从这两个维度精心评判。

原则或特性 | 架构能够...
---|---
功能多样性 | ...提供“足够好”的机制，利用简洁的表达式来处理各种问题
概念完整性 | ...提供单一的，最优的，无冗余的方式来表示一组类似问题的解决方案
修改独立性 | ...保持它的元素的独立性，这样能够让需要的修改最少从而适应变化
可构建性 | ...指导软件进行一致、正确的构建
增长适应性 | ...考虑到可能的增长
熵增抵抗力 | ...通过适应、限制和隔离变化的影响来保持有序
自动传播 | ...通过在模块之间传播数据或行为，保持一致性和正确性

结构 | 结构能够...
---|---
模块 | ...将设计或实现决定隐藏在个稳定的接口之后
依赖关系 | ...按照一个模块使用另一个模块的功能的方式来组织模块
数据访问 | ...隔离数据，设置数据访问权限
进程 | ...封装并隔离一个模块的运行时状态


上面介绍的两个维度并不是架构都需要满足的，架构通常只能满足其中几个。另外除了上面两个晦涩的维度，下面给出自己理解的对于好的架构的简单评判标准：
* 模块是内聚的，不可分解的，职责明确的
* 模块间的界限是清晰的
* 经得起质疑的 

特此要强调一点——没有唯一正确的架构，每个架构都是基于某些特定的关注点进行设计的，不可能一开始就是设计出足够完美的架构，需要不断的修改优化。 

## 怎么做一个架构
1. 理解产品的需求和大体的未来发展路径
2. 确定产品需求之外的信息
    1. 如实际运行环境的相关特点
    2. 系统的关注点，如性能，安全，可伸缩，可变性，可维护性，可用性，可构建性等 
3. 基于前面两点的内容来折中设计最终的架构
4. 通过review或者评审的方式，对架构进行进一步的调整
5. 实际开发迭代过程不断完善，如果发现架构没有让工作效率更加高效也可能需要考虑重新设计架构 




