---
layout: single
title:  "代码"
date:   2018-08-19 17:19:59 +0800
categories: idea
tags: programmer code effeciency 
excerpt: 知其然，知其所以然
header:
  overlay_image: /assets/images/explorer.jpg
  caption: "Photo by yqman"
  cta_label: "More Info"
  cta_url: "http://yqman.top"
toc: true
toc_label: "Contents"
toc_icon: "align-left" 
---
从事软件行业已有几年，一直在思考这个行业，思考代码。恰巧最近刚读完《代码大全》这本书，有了点新的想法在这里分享出来。

对于软件行业来说，所做的任何事情，无外乎在解决某个问题。有的是解决某个复杂的业务问题，有的是提高生产效率问题。一个较大项目从开始到结束大概有：需求分析、架构设计、详细设计、自解释或者自说明代码、代码自测、构建集成、集成测试和后期维护等这些流程。把这一串连接起来，会发现其背后的目的就是为了提高生产效率。如果你不同意这个观点，那么很简单，如果遇到一个需求，你直接开始coding，然后写到一半发现忽略了什么或者理解错了，然后重新写代码；更有甚者，万一代码快写完发现理解错了需求或者之前的模块间的关系想错了，最终导致整个项目需要被重写，此时浪费的时间不是在降低生产效率，那是在干什么？这里谈论目的的意义在于，只有知道每一件事背后真正的目的，我们才能更好的去遵守去完善它，达到知其然知其所以然的地步。这里举个例子，小项目可能会省略大项目部分事情，比如架构设计；因为项目足够小，一共也不需要完成多少业务，一拍脑袋就出来了，就没有必要去在开发过程中将架构设计这个东西排进时间表里面，这才是真正的提高生产效率。

基于某种目的，在实际开发过程中下面这些认知可能会有点帮助。

## 关于语言
不同类型的程序员会使用至少一门语言，现有的语言有很多。网上经常在争论某某语言排名第一，某语言具有无以伦比的优势，说的感觉像是是学会了它，你就是大神一样。然而语言仅仅是在我们解决问题的时候拿来使用的东西而已。不可否认，使用个别语言可以在某个方面提高开发效率；但是这是次要的，真正重要的是解决问题的思路，你的idea。选择一门自己顺手的语言，重点去提高自己的思考和处理问题的方式，提高解决问题的能力。有了思路，语言本身不具备的特性，通过约束或者语言层面的封装，相信还是很容易做到的。不应该被语言的问题所困扰，你的目的是解决问题而不是为了使用某个语言。你要想在别人面前炫技自己会多少种语言，那你牛逼。

## 关于工具
软件开发会使用各种各样的小工具。一些流行的ide，编译过程只需要点击一个按钮不需要每次都敲一堆重复的指令；代码高亮显示和事实报错功能也都很好用；工具的出现大大提升工作效率，让我们更加专注于自己的业务。与上一章讲的语言一样，工具也一样只是帮助我们解决问题，不代表拥有它们，就能解决问题。一直痴迷于各种工具是不合理的，摆正对工具的态度，真正让工具为我所用。

## 关于抽象
人类之所以伟大在于其抽象能力，生活中到处都是抽象的例子。手机，电脑，汽车，公司这些概念就是一种抽象。没有这些抽象人类根本无法高效的沟通，你也无法想象我们该如何沟通。通过抽象我们可以不在乎它背后的细节，而只需要关心它对外提供的功能以及我们需要为它做的事情。

放到代码里来看，架构设计时定义各模块的职责和模块间的输入输出，而对于模块内部实现则只字未提，正因为这样的抽象才使得可以进行高层次的设计。在实际的编码过程中，一个子程序也是一个抽象，好的子程序从名字就知道它能处理逻辑是什么，通过调用它就能获取到期望的返回值，类似的例子还有很多。脑子里有抽象的概念，也就能看懂很多的事情，知道当前时刻的职责是什么。比如设计架构的时候不应该考虑太多模块内部是如何实现的，设计一个接口的时候只需要关注该抽象对外提供的功能是什么，而对于如何实现不属于抽象接口的职责范围。

## 为人写代码
如果项目规模变大，耗费时间最多的是人与人之间的交流，而真正构建的时间并不多。能不能说把写代码时间变长，减少交流的时间是提高工作效率的关键。为人写代码的最终目的就是提高工作效率。通过增加注释、为程序和类获取一个适合的名字和减少子程序的长度等措施，都会让自己的代码更易于被人看懂。如果发现注释或者名字不好取，那一定是你代码有问题，比如抽象不合理或者试图在一个地方完成太多的任务。通过提高代码质量和健壮性，不要想当然以为别人会理解你背后的隐含逻辑；因此代码中需要处理各种可能的异常，并通过合适的方式将错误信息告知给使用者。

把同行业的人看成一个普通人，没有惊人的记忆力，没有处理复杂逻辑的能力，不要自以为是认为所有人都能看懂和理解你的代码。所做的一切努力都是为了提高生产效率和提高自身在一定约束条件下寻找最优解的的能力。这是一条永无止境的道路，永远无法到达尽头。所能做的就是一直在路上前行，一旦停下意味着就会被后来者追上。




